#!/usr/bin/env node

import { promises as fs } from "fs";
import { join } from "path";
import { getEnvironmentValue } from "../runtime";
import { GatekeeperSchema } from "../types";

async function fetchGatekeeperSchema(
  serviceToken: string,
  endpoint: string
): Promise<GatekeeperSchema | null> {
  try {
    const response = await fetch(`${endpoint}/schema`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${serviceToken}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      console.error(
        `Failed to fetch gatekeeper schema: ${response.statusText}`
      );
      return null;
    }

    const data: GatekeeperSchema = await response.json();
    return data;
  } catch (error) {
    console.error("Failed to fetch gatekeeper schema:", error);
    return null;
  }
}

async function build() {
  console.log("[Lumberjack] Building gatekeeper types...");

  const serviceToken = getEnvironmentValue("LUMBERJACK_SERVICE_TOKEN");
  if (!serviceToken) {
    console.error(
      "[Lumberjack] No service token found. Set LUMBERJACK_SERVICE_TOKEN environment variable."
    );
    process.exit(1);
  }

  const gatekeeperEndpoint =
    getEnvironmentValue("LUMBERJACK_GATEKEEPER_ENDPOINT") ||
    "https://api.trylumberjack.com/gatekeeper";

  const schema = await fetchGatekeeperSchema(serviceToken, gatekeeperEndpoint);
  if (!schema) {
    console.error("[Lumberjack] Failed to fetch gatekeeper schema");
    process.exit(1);
  }

  // Create .lumberjack directory if it doesn't exist
  const outputDir = join(process.cwd(), ".lumberjack");
  await fs.mkdir(outputDir, { recursive: true });

  // Write the schema to gatekeeper-types.json
  const outputPath = join(outputDir, "gatekeeper-types.json");
  await fs.writeFile(outputPath, JSON.stringify(schema, null, 2));

  console.log(`[Lumberjack] Gatekeeper types written to ${outputPath}`);
  console.log(
    `[Lumberjack] Found ${
      schema.gatekeepers.length
    } gatekeepers: ${schema.gatekeepers.join(", ")}`
  );

  // Generate TypeScript types file
  const typesContent = generateTypeScript(schema);
  const typesPath = join(outputDir, "gatekeeper-types.d.ts");
  await fs.writeFile(typesPath, typesContent);
  console.log(`[Lumberjack] TypeScript types written to ${typesPath}`);
}

function generateTypeScript(schema: GatekeeperSchema): string {
  const gatekeeperKeys = schema.gatekeepers
    .map((key) => `'${key}'`)
    .join(" | ");

  return `// Generated by Lumberjack CLI
// Do not edit manually

export type GatekeeperKey = ${gatekeeperKeys || "never"};

declare module '@lumberjack-sdk/core' {
  interface Lumberjack {
    gatekeeper(key: GatekeeperKey): {
      pass(): Promise<void>;
      fail(): Promise<void>;
    };
  }
}
`;
}

// Run the build command
build().catch((error) => {
  console.error("[Lumberjack] Build failed:", error);
  process.exit(1);
});
